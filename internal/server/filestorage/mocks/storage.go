// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KryukovO/goph-keeper/internal/server/filestorage (interfaces: FileStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/KryukovO/goph-keeper/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockFileStorage is a mock of FileStorage interface.
type MockFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageMockRecorder
}

// MockFileStorageMockRecorder is the mock recorder for MockFileStorage.
type MockFileStorageMockRecorder struct {
	mock *MockFileStorage
}

// NewMockFileStorage creates a new mock instance.
func NewMockFileStorage(ctrl *gomock.Controller) *MockFileStorage {
	mock := &MockFileStorage{ctrl: ctrl}
	mock.recorder = &MockFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorage) EXPECT() *MockFileStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileStorage) Delete(arg0 entities.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileStorageMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileStorage)(nil).Delete), arg0)
}

// List mocks base method.
func (m *MockFileStorage) List(arg0 int64) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFileStorageMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFileStorage)(nil).List), arg0)
}

// Load mocks base method.
func (m *MockFileStorage) Load(arg0 *entities.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockFileStorageMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockFileStorage)(nil).Load), arg0)
}

// Save mocks base method.
func (m *MockFileStorage) Save(arg0 entities.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileStorageMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileStorage)(nil).Save), arg0)
}

// SetSubscriptions mocks base method.
func (m *MockFileStorage) SetSubscriptions(arg0 map[int64]entities.Subscription) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubscriptions", arg0)
}

// SetSubscriptions indicates an expected call of SetSubscriptions.
func (mr *MockFileStorageMockRecorder) SetSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubscriptions", reflect.TypeOf((*MockFileStorage)(nil).SetSubscriptions), arg0)
}

// UpdateSubscription mocks base method.
func (m *MockFileStorage) UpdateSubscription(arg0 int64, arg1 entities.Subscription) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSubscription", arg0, arg1)
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockFileStorageMockRecorder) UpdateSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockFileStorage)(nil).UpdateSubscription), arg0, arg1)
}
