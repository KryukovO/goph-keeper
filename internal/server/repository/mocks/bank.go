// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KryukovO/goph-keeper/internal/server/repository (interfaces: BankDataRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/KryukovO/goph-keeper/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockBankDataRepository is a mock of BankDataRepository interface.
type MockBankDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBankDataRepositoryMockRecorder
}

// MockBankDataRepositoryMockRecorder is the mock recorder for MockBankDataRepository.
type MockBankDataRepositoryMockRecorder struct {
	mock *MockBankDataRepository
}

// NewMockBankDataRepository creates a new mock instance.
func NewMockBankDataRepository(ctrl *gomock.Controller) *MockBankDataRepository {
	mock := &MockBankDataRepository{ctrl: ctrl}
	mock.recorder = &MockBankDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankDataRepository) EXPECT() *MockBankDataRepositoryMockRecorder {
	return m.recorder
}

// AddBankData mocks base method.
func (m *MockBankDataRepository) AddBankData(arg0 context.Context, arg1 entities.BankData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBankData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBankData indicates an expected call of AddBankData.
func (mr *MockBankDataRepositoryMockRecorder) AddBankData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBankData", reflect.TypeOf((*MockBankDataRepository)(nil).AddBankData), arg0, arg1)
}

// BankCard mocks base method.
func (m *MockBankDataRepository) BankCard(arg0 context.Context, arg1 *entities.BankData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BankCard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BankCard indicates an expected call of BankCard.
func (mr *MockBankDataRepositoryMockRecorder) BankCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BankCard", reflect.TypeOf((*MockBankDataRepository)(nil).BankCard), arg0, arg1)
}

// BankCardNumbersList mocks base method.
func (m *MockBankDataRepository) BankCardNumbersList(arg0 context.Context, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BankCardNumbersList", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BankCardNumbersList indicates an expected call of BankCardNumbersList.
func (mr *MockBankDataRepositoryMockRecorder) BankCardNumbersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BankCardNumbersList", reflect.TypeOf((*MockBankDataRepository)(nil).BankCardNumbersList), arg0, arg1)
}

// DeleteBankData mocks base method.
func (m *MockBankDataRepository) DeleteBankData(arg0 context.Context, arg1 entities.BankData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBankData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBankData indicates an expected call of DeleteBankData.
func (mr *MockBankDataRepositoryMockRecorder) DeleteBankData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankData", reflect.TypeOf((*MockBankDataRepository)(nil).DeleteBankData), arg0, arg1)
}

// UpdateBankData mocks base method.
func (m *MockBankDataRepository) UpdateBankData(arg0 context.Context, arg1 string, arg2 entities.BankData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBankData indicates an expected call of UpdateBankData.
func (mr *MockBankDataRepositoryMockRecorder) UpdateBankData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankData", reflect.TypeOf((*MockBankDataRepository)(nil).UpdateBankData), arg0, arg1, arg2)
}
