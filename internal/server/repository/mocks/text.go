// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KryukovO/goph-keeper/internal/server/repository (interfaces: TextDataRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/KryukovO/goph-keeper/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockTextDataRepository is a mock of TextDataRepository interface.
type MockTextDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTextDataRepositoryMockRecorder
}

// MockTextDataRepositoryMockRecorder is the mock recorder for MockTextDataRepository.
type MockTextDataRepositoryMockRecorder struct {
	mock *MockTextDataRepository
}

// NewMockTextDataRepository creates a new mock instance.
func NewMockTextDataRepository(ctrl *gomock.Controller) *MockTextDataRepository {
	mock := &MockTextDataRepository{ctrl: ctrl}
	mock.recorder = &MockTextDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextDataRepository) EXPECT() *MockTextDataRepositoryMockRecorder {
	return m.recorder
}

// AddTextData mocks base method.
func (m *MockTextDataRepository) AddTextData(arg0 context.Context, arg1 entities.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTextData indicates an expected call of AddTextData.
func (mr *MockTextDataRepositoryMockRecorder) AddTextData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextData", reflect.TypeOf((*MockTextDataRepository)(nil).AddTextData), arg0, arg1)
}

// DeleteTextData mocks base method.
func (m *MockTextDataRepository) DeleteTextData(arg0 context.Context, arg1 entities.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTextData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTextData indicates an expected call of DeleteTextData.
func (mr *MockTextDataRepositoryMockRecorder) DeleteTextData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextData", reflect.TypeOf((*MockTextDataRepository)(nil).DeleteTextData), arg0, arg1)
}

// TextData mocks base method.
func (m *MockTextDataRepository) TextData(arg0 context.Context, arg1 *entities.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TextData indicates an expected call of TextData.
func (mr *MockTextDataRepositoryMockRecorder) TextData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextData", reflect.TypeOf((*MockTextDataRepository)(nil).TextData), arg0, arg1)
}

// TextLabelsList mocks base method.
func (m *MockTextDataRepository) TextLabelsList(arg0 context.Context, arg1 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextLabelsList", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextLabelsList indicates an expected call of TextLabelsList.
func (mr *MockTextDataRepositoryMockRecorder) TextLabelsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextLabelsList", reflect.TypeOf((*MockTextDataRepository)(nil).TextLabelsList), arg0, arg1)
}

// UpdateTextData mocks base method.
func (m *MockTextDataRepository) UpdateTextData(arg0 context.Context, arg1 string, arg2 entities.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTextData indicates an expected call of UpdateTextData.
func (mr *MockTextDataRepositoryMockRecorder) UpdateTextData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextData", reflect.TypeOf((*MockTextDataRepository)(nil).UpdateTextData), arg0, arg1, arg2)
}
