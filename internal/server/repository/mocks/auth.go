// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KryukovO/goph-keeper/internal/server/repository (interfaces: AuthDataRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/KryukovO/goph-keeper/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthDataRepository is a mock of AuthDataRepository interface.
type MockAuthDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthDataRepositoryMockRecorder
}

// MockAuthDataRepositoryMockRecorder is the mock recorder for MockAuthDataRepository.
type MockAuthDataRepositoryMockRecorder struct {
	mock *MockAuthDataRepository
}

// NewMockAuthDataRepository creates a new mock instance.
func NewMockAuthDataRepository(ctrl *gomock.Controller) *MockAuthDataRepository {
	mock := &MockAuthDataRepository{ctrl: ctrl}
	mock.recorder = &MockAuthDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthDataRepository) EXPECT() *MockAuthDataRepositoryMockRecorder {
	return m.recorder
}

// AddAuthData mocks base method.
func (m *MockAuthDataRepository) AddAuthData(arg0 context.Context, arg1 entities.AuthData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthData indicates an expected call of AddAuthData.
func (mr *MockAuthDataRepositoryMockRecorder) AddAuthData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthData", reflect.TypeOf((*MockAuthDataRepository)(nil).AddAuthData), arg0, arg1)
}

// AuthDataList mocks base method.
func (m *MockAuthDataRepository) AuthDataList(arg0 context.Context, arg1 int64) ([]entities.AuthData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDataList", arg0, arg1)
	ret0, _ := ret[0].([]entities.AuthData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthDataList indicates an expected call of AuthDataList.
func (mr *MockAuthDataRepositoryMockRecorder) AuthDataList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDataList", reflect.TypeOf((*MockAuthDataRepository)(nil).AuthDataList), arg0, arg1)
}

// DeleteAuthData mocks base method.
func (m *MockAuthDataRepository) DeleteAuthData(arg0 context.Context, arg1 entities.AuthData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthData indicates an expected call of DeleteAuthData.
func (mr *MockAuthDataRepositoryMockRecorder) DeleteAuthData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthData", reflect.TypeOf((*MockAuthDataRepository)(nil).DeleteAuthData), arg0, arg1)
}

// UpdateAuthData mocks base method.
func (m *MockAuthDataRepository) UpdateAuthData(arg0 context.Context, arg1, arg2 string, arg3 entities.AuthData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthData", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthData indicates an expected call of UpdateAuthData.
func (mr *MockAuthDataRepositoryMockRecorder) UpdateAuthData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthData", reflect.TypeOf((*MockAuthDataRepository)(nil).UpdateAuthData), arg0, arg1, arg2, arg3)
}
