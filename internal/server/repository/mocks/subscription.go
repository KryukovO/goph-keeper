// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KryukovO/goph-keeper/internal/server/repository (interfaces: SubscriptionRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/KryukovO/goph-keeper/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// Sunbsriptions mocks base method.
func (m *MockSubscriptionRepository) Sunbsriptions(arg0 context.Context) (map[int64]entities.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sunbsriptions", arg0)
	ret0, _ := ret[0].(map[int64]entities.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sunbsriptions indicates an expected call of Sunbsriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) Sunbsriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sunbsriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).Sunbsriptions), arg0)
}
